// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authcomm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authcomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authcomm_2eproto;
namespace auth {
class AuthServerResponse;
struct AuthServerResponseDefaultTypeInternal;
extern AuthServerResponseDefaultTypeInternal _AuthServerResponse_default_instance_;
class ChatServerRequest;
struct ChatServerRequestDefaultTypeInternal;
extern ChatServerRequestDefaultTypeInternal _ChatServerRequest_default_instance_;
}  // namespace auth
PROTOBUF_NAMESPACE_OPEN
template<> ::auth::AuthServerResponse* Arena::CreateMaybeMessage<::auth::AuthServerResponse>(Arena*);
template<> ::auth::ChatServerRequest* Arena::CreateMaybeMessage<::auth::ChatServerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace auth {

enum ChatServerRequest_RequestType : int {
  ChatServerRequest_RequestType_CREATEACC = 0,
  ChatServerRequest_RequestType_AUTHENTICATE = 1
};
bool ChatServerRequest_RequestType_IsValid(int value);
constexpr ChatServerRequest_RequestType ChatServerRequest_RequestType_RequestType_MIN = ChatServerRequest_RequestType_CREATEACC;
constexpr ChatServerRequest_RequestType ChatServerRequest_RequestType_RequestType_MAX = ChatServerRequest_RequestType_AUTHENTICATE;
constexpr int ChatServerRequest_RequestType_RequestType_ARRAYSIZE = ChatServerRequest_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatServerRequest_RequestType_descriptor();
template<typename T>
inline const std::string& ChatServerRequest_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatServerRequest_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatServerRequest_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatServerRequest_RequestType_descriptor(), enum_t_value);
}
inline bool ChatServerRequest_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatServerRequest_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatServerRequest_RequestType>(
    ChatServerRequest_RequestType_descriptor(), name, value);
}
enum AuthServerResponse_ResponseType : int {
  AuthServerResponse_ResponseType_ACCCREATED = 0,
  AuthServerResponse_ResponseType_ACCEXISTS = 1,
  AuthServerResponse_ResponseType_AUTHSUCCESS = 2,
  AuthServerResponse_ResponseType_AUTHFAILURE = 3,
  AuthServerResponse_ResponseType_DBERROR = 4
};
bool AuthServerResponse_ResponseType_IsValid(int value);
constexpr AuthServerResponse_ResponseType AuthServerResponse_ResponseType_ResponseType_MIN = AuthServerResponse_ResponseType_ACCCREATED;
constexpr AuthServerResponse_ResponseType AuthServerResponse_ResponseType_ResponseType_MAX = AuthServerResponse_ResponseType_DBERROR;
constexpr int AuthServerResponse_ResponseType_ResponseType_ARRAYSIZE = AuthServerResponse_ResponseType_ResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthServerResponse_ResponseType_descriptor();
template<typename T>
inline const std::string& AuthServerResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthServerResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthServerResponse_ResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthServerResponse_ResponseType_descriptor(), enum_t_value);
}
inline bool AuthServerResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthServerResponse_ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthServerResponse_ResponseType>(
    AuthServerResponse_ResponseType_descriptor(), name, value);
}
// ===================================================================

class ChatServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.ChatServerRequest) */ {
 public:
  inline ChatServerRequest() : ChatServerRequest(nullptr) {}
  ~ChatServerRequest() override;
  explicit constexpr ChatServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatServerRequest(const ChatServerRequest& from);
  ChatServerRequest(ChatServerRequest&& from) noexcept
    : ChatServerRequest() {
    *this = ::std::move(from);
  }

  inline ChatServerRequest& operator=(const ChatServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatServerRequest& operator=(ChatServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatServerRequest* internal_default_instance() {
    return reinterpret_cast<const ChatServerRequest*>(
               &_ChatServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatServerRequest& a, ChatServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatServerRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatServerRequest* New() const final {
    return new ChatServerRequest();
  }

  ChatServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatServerRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.ChatServerRequest";
  }
  protected:
  explicit ChatServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatServerRequest_RequestType RequestType;
  static constexpr RequestType CREATEACC =
    ChatServerRequest_RequestType_CREATEACC;
  static constexpr RequestType AUTHENTICATE =
    ChatServerRequest_RequestType_AUTHENTICATE;
  static inline bool RequestType_IsValid(int value) {
    return ChatServerRequest_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    ChatServerRequest_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    ChatServerRequest_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    ChatServerRequest_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return ChatServerRequest_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return ChatServerRequest_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return ChatServerRequest_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // required string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_MUST_USE_RESULT std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .auth.ChatServerRequest.RequestType type = 1 [default = AUTHENTICATE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::auth::ChatServerRequest_RequestType type() const;
  void set_type(::auth::ChatServerRequest_RequestType value);
  private:
  ::auth::ChatServerRequest_RequestType _internal_type() const;
  void _internal_set_type(::auth::ChatServerRequest_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:auth.ChatServerRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  friend struct ::TableStruct_authcomm_2eproto;
};
// -------------------------------------------------------------------

class AuthServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:auth.AuthServerResponse) */ {
 public:
  inline AuthServerResponse() : AuthServerResponse(nullptr) {}
  ~AuthServerResponse() override;
  explicit constexpr AuthServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthServerResponse(const AuthServerResponse& from);
  AuthServerResponse(AuthServerResponse&& from) noexcept
    : AuthServerResponse() {
    *this = ::std::move(from);
  }

  inline AuthServerResponse& operator=(const AuthServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthServerResponse& operator=(AuthServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthServerResponse* internal_default_instance() {
    return reinterpret_cast<const AuthServerResponse*>(
               &_AuthServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthServerResponse& a, AuthServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthServerResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthServerResponse* New() const final {
    return new AuthServerResponse();
  }

  AuthServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthServerResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "auth.AuthServerResponse";
  }
  protected:
  explicit AuthServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthServerResponse_ResponseType ResponseType;
  static constexpr ResponseType ACCCREATED =
    AuthServerResponse_ResponseType_ACCCREATED;
  static constexpr ResponseType ACCEXISTS =
    AuthServerResponse_ResponseType_ACCEXISTS;
  static constexpr ResponseType AUTHSUCCESS =
    AuthServerResponse_ResponseType_AUTHSUCCESS;
  static constexpr ResponseType AUTHFAILURE =
    AuthServerResponse_ResponseType_AUTHFAILURE;
  static constexpr ResponseType DBERROR =
    AuthServerResponse_ResponseType_DBERROR;
  static inline bool ResponseType_IsValid(int value) {
    return AuthServerResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    AuthServerResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    AuthServerResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    AuthServerResponse_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResponseType_descriptor() {
    return AuthServerResponse_ResponseType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return AuthServerResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return AuthServerResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kUseridFieldNumber = 3,
  };
  // required .auth.AuthServerResponse.ResponseType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::auth::AuthServerResponse_ResponseType type() const;
  void set_type(::auth::AuthServerResponse_ResponseType value);
  private:
  ::auth::AuthServerResponse_ResponseType _internal_type() const;
  void _internal_set_type(::auth::AuthServerResponse_ResponseType value);
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userid = 3;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:auth.AuthServerResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_authcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatServerRequest

// required .auth.ChatServerRequest.RequestType type = 1 [default = AUTHENTICATE];
inline bool ChatServerRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChatServerRequest::has_type() const {
  return _internal_has_type();
}
inline void ChatServerRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::auth::ChatServerRequest_RequestType ChatServerRequest::_internal_type() const {
  return static_cast< ::auth::ChatServerRequest_RequestType >(type_);
}
inline ::auth::ChatServerRequest_RequestType ChatServerRequest::type() const {
  // @@protoc_insertion_point(field_get:auth.ChatServerRequest.type)
  return _internal_type();
}
inline void ChatServerRequest::_internal_set_type(::auth::ChatServerRequest_RequestType value) {
  assert(::auth::ChatServerRequest_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ChatServerRequest::set_type(::auth::ChatServerRequest_RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:auth.ChatServerRequest.type)
}

// required int32 id = 2;
inline bool ChatServerRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChatServerRequest::has_id() const {
  return _internal_has_id();
}
inline void ChatServerRequest::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatServerRequest::id() const {
  // @@protoc_insertion_point(field_get:auth.ChatServerRequest.id)
  return _internal_id();
}
inline void ChatServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ChatServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:auth.ChatServerRequest.id)
}

// required string email = 3;
inline bool ChatServerRequest::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatServerRequest::has_email() const {
  return _internal_has_email();
}
inline void ChatServerRequest::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatServerRequest::email() const {
  // @@protoc_insertion_point(field_get:auth.ChatServerRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatServerRequest::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.ChatServerRequest.email)
}
inline std::string* ChatServerRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:auth.ChatServerRequest.email)
  return _s;
}
inline const std::string& ChatServerRequest::_internal_email() const {
  return email_.Get();
}
inline void ChatServerRequest::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatServerRequest::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatServerRequest::release_email() {
  // @@protoc_insertion_point(field_release:auth.ChatServerRequest.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatServerRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.ChatServerRequest.email)
}

// required string password = 4;
inline bool ChatServerRequest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChatServerRequest::has_password() const {
  return _internal_has_password();
}
inline void ChatServerRequest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChatServerRequest::password() const {
  // @@protoc_insertion_point(field_get:auth.ChatServerRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatServerRequest::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:auth.ChatServerRequest.password)
}
inline std::string* ChatServerRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:auth.ChatServerRequest.password)
  return _s;
}
inline const std::string& ChatServerRequest::_internal_password() const {
  return password_.Get();
}
inline void ChatServerRequest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatServerRequest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatServerRequest::release_password() {
  // @@protoc_insertion_point(field_release:auth.ChatServerRequest.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChatServerRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:auth.ChatServerRequest.password)
}

// -------------------------------------------------------------------

// AuthServerResponse

// required .auth.AuthServerResponse.ResponseType type = 1;
inline bool AuthServerResponse::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthServerResponse::has_type() const {
  return _internal_has_type();
}
inline void AuthServerResponse::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::auth::AuthServerResponse_ResponseType AuthServerResponse::_internal_type() const {
  return static_cast< ::auth::AuthServerResponse_ResponseType >(type_);
}
inline ::auth::AuthServerResponse_ResponseType AuthServerResponse::type() const {
  // @@protoc_insertion_point(field_get:auth.AuthServerResponse.type)
  return _internal_type();
}
inline void AuthServerResponse::_internal_set_type(::auth::AuthServerResponse_ResponseType value) {
  assert(::auth::AuthServerResponse_ResponseType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void AuthServerResponse::set_type(::auth::AuthServerResponse_ResponseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:auth.AuthServerResponse.type)
}

// required int32 id = 2;
inline bool AuthServerResponse::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthServerResponse::has_id() const {
  return _internal_has_id();
}
inline void AuthServerResponse::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthServerResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthServerResponse::id() const {
  // @@protoc_insertion_point(field_get:auth.AuthServerResponse.id)
  return _internal_id();
}
inline void AuthServerResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AuthServerResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:auth.AuthServerResponse.id)
}

// optional int32 userid = 3;
inline bool AuthServerResponse::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthServerResponse::has_userid() const {
  return _internal_has_userid();
}
inline void AuthServerResponse::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthServerResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthServerResponse::userid() const {
  // @@protoc_insertion_point(field_get:auth.AuthServerResponse.userid)
  return _internal_userid();
}
inline void AuthServerResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthServerResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:auth.AuthServerResponse.userid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::auth::ChatServerRequest_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::ChatServerRequest_RequestType>() {
  return ::auth::ChatServerRequest_RequestType_descriptor();
}
template <> struct is_proto_enum< ::auth::AuthServerResponse_ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::auth::AuthServerResponse_ResponseType>() {
  return ::auth::AuthServerResponse_ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authcomm_2eproto
